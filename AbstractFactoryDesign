El patrón de diseño Fábrica Abstracta se utiliza para proporcionar una interfaz común para crear una serie de objetos (productos) 
bajo una u otra arquitectura o framework, sin que los clientes de dichos productos tengan que tener conocimiento de la arquitectura
elegida para implemetar cada familia de productos.

A continuacin se muestra un ejemplo en Java donde se crean diferentes tipos de carros, unos de la marca HONDA los cuales son el City y el Brio
y otros de la marca HYUNDAI los cuales son el I10 e I20.

Primeramente se crea una clase de abstracta Carro la cual unicamente contiene el metodo de manejar

public interface Car
{
    void drive();
}

------------------------------------------------------------------
En esta parte se crea una interfaz encargada de crear la fabrica de carros especifica, ya sea HONDA O HYUNDAI

public interface CarFactory 
{
    
    Car createCar(String carType);
}

------------------------------------------------------------------
Ahora crearemos clases para cada modelo de carro que querramos crear, la clase City implmenta la interfaz Car que tiene como método
drive.

public class City implements Car
{

    @Override
    public void drive() {
        System.out.println("Driving City...");
    }
    
}

public class brio implements Car
{
    public void drive()
    {
       System.out.println("Driving Brio...");
    }
}
------------------------------------------------------------------

public class I10 implements Car{

    @Override
    public void drive() {
        System.out.println("Driving I10...");
    }
    
}

public class I20 implements Car {

    @Override
    public void drive() {
         System.out.println("Driving I20...");
    }
    
}

------------------------------------------------------------------
En esta parte del codigo se implementa una clase para cada fabrica de carros HONDA Y HYUNDAI las cuales produciran un objeto que será el tipo 
de carro de cada compañía.
Ambas clases implementan la interfaz CarFactory la cual nos da el metodo createCar que nos permite crear el objeto que según el 
cliente elija.


public class HondaCarFactory implements CarFactory
{

    @Override
    public Car createCar(String carType) 
    {
        
        if("brio".equalsIgnoreCase(carType))
        {
            return new brio();
        }
        
        if("city".equalsIgnoreCase(carType))
        {
            return new City();
        }
        return null;
        
    }
    
}

public class HyundaiCarFactory implements CarFactory{

    @Override
    public Car createCar(String carType)
    {
        if("i10".equalsIgnoreCase(carType))
        {
            return new I10();
        }
        
        if("i20".equalsIgnoreCase(carType))
        {
            return new I20();
        }
        return null;
    }
    
}
------------------------------------------------------------------
En esta parte del código el cliente solicita la fabrica de carros deseada segun el modelo de carro que quiera.
Primero se produce la fabrica de carros y luego se construyen los carros de esa fábrica.

public class FactoryProducer 
{
    public static CarFactory getCarFactory(String factoryType)
    {
        if("Hyundai".equalsIgnoreCase(factoryType))
        {
            return new HyundaiCarFactory();
        }
        
        if("Honda".equalsIgnoreCase(factoryType))
        {
            return new HondaCarFactory();
        }
        return null;
    }
}
------------------------------------------------------------------
Para FINALIZAR se crea una clase que reciba los parametros del cliente y nos de el carro que queire manejear.
Primerp se pasa el parametro de la fabrica que se queire construir y despues el parametro del carro de la fabrica de carros que queire 
manejar.
al final el programa arroja un mensaje diciendo el carro que estás manejando:


public class abstracFactorytTest 
{
    public static void main(String[] args)
    {
        CarFactory hondaCarFactory = FactoryProducer.getCarFactory("honda");
        Car brio= hondaCarFactory.createCar("brio");
        brio.drive();
        
        Car city = hondaCarFactory.createCar("City");
        city.drive();
        
        CarFactory hyuCarFactory = FactoryProducer.getCarFactory("Hyundai");
        Car i10Car = hyuCarFactory.createCar(("i10"));
        i10Car.drive();
        
        Car i20Car = hyuCarFactory.createCar(("i20"));
        i20Car.drive();
                
    }
}









